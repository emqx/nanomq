##============================================================
## WebHook
##============================================================

## Enable web hook
##
## Value: boolean
webhook.enable=true

## Webhook URL
##
## Value: String
webhook.url=http://127.0.0.1:8888

## HTTP Headers
##81
## Example:
## 1. web.hook.headers.content-type=application/json
## 2. web.hook.headers.accept=*
##
## Value: String


## CHECK HERE
## the doc "web-hook.md" and notes in example.conf are not updated.

## if I add "" then broker_test will fail, saying that Connection refused.
## if I remove "", then there will be a hint:"Unrecognized / error:syntax error", should info xinyi.
webhook.headers.content-type=application/json

## The encoding format of the payload field in the HTTP body
## The payload field only appears in the on_message_publish and on_message_delivered actions
##
## Value: plain | base64 | base62
# webhook.body.encoding_of_payload_field=plain

##--------------------------------------------------------------------
## PEM format file of CA's
##
## Value: File
## web.hook.ssl.cacertfile =<PEM format file of CA's>

## Certificate file to use, PEM format assumed
##
## Value: File
## web.hook.ssl.certfile=<Certificate file to use>

## Private key file to use, PEM format assumed
##
## Value: File
## web.hook.ssl.keyfile=<Private key file to use>

## Turn on peer certificate verification
##
## Value: true | false
## web.hook.ssl.verify=false

## If not specified, the server's names returned in server's certificate is validated against
## what's provided `web.hook.url` config's host part.
## Setting to 'false' will make NanoMQ ignore unmatched server names.
## If set with a host name, the server's names returned in server's certificate is validated
## against this value.
##
## Value: true | false
## web.hook.ssl.server_name_indication=false

## Connection process pool size
##
## Value: Number
# webhook.pool_size=32

# webhook.rule.client.connect = [{action: on_client_connect}]
webhook.rule.client.connack = [{action: on_client_connack}]
# webhook.rule.client.connected = [{action: on_client_connected}]
# webhook.rule.client.disconnected = [{action: on_client_disconnected}]
# webhook.rule.client.subscribe = [{action: on_client_subscribe}]
# webhook.rule.client.unsubscribe = [{action: on_client_unsubscribe}]
# webhook.rule.session.subscribed = [{action: on_session_subscribed}]
# webhook.rule.session.unsubscribed = [{action: on_session_unsubscribed}]
# webhook.rule.session.terminated = [{action: on_session_terminated}]
webhook.rule.message.publish = [{action: on_message_publish}]
# webhook.rule.message.delivered = [{action: on_message_delivered}]
# webhook.rule.message.acked = [{action: on_message_acked}]

