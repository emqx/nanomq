##====================================================================
## Configuration for AWS Bridge
##====================================================================

##--------------------------------------------------------------------
## NanoMQ supports multiple bridging.
##
## Format:
## bridge.mqtt.{name}.{item} = {value}

## aws endpoint
##
## Value: String
bridge.mqtt.aws.host=localhost

## aws mqtt port
##
## Value: String
bridge.mqtt.aws.port=8883

## Protocol version of the bridge.
##
## Value: Enum
## - 5: mqttv5
## - 4: mqttv311
## - 3: mqttv31
bridge.mqtt.aws.proto_ver=4

## Whether to enable bridge mode for mqtt bridge
##
## This option is prepared for the mqtt broker which does not
## support bridge_mode such as the mqtt-plugin of the rabbitmq
##
## Value: boolean
bridge.mqtt.aws.bridge_mode=false

## The ClientId of a remote bridge.
## Default random string.
##
## Value: String
bridge.mqtt.aws.clientid=aws_bridge_client

## Ping interval of a down bridge.
##
## Value: Duration
## Default: 10 seconds
bridge.mqtt.aws.keepalive=60

## The Clean start flag of a remote bridge.
##
## Value: boolean
## Default: true
##
## NOTE: Some IoT platforms require clean_start
##       must be set to 'true'
bridge.mqtt.aws.clean_start=true

## The username for a remote bridge.
##
## Value: String
# bridge.mqtt.aws.username=username

## The password for a remote bridge.
##
## Value: String
# bridge.mqtt.aws.password=passwd

## Topics that need to be forward to IoTHUB
##
## Value: String
## Example: topic1/#,topic2/#
bridge.mqtt.aws.forwards=topic1/#,topic2/#

## Need to subscribe to remote broker topics
##
## Value: String
bridge.mqtt.aws.subscription.1.topic=cmd/topic1

## Need to subscribe to remote topics QoS.
##
## Value: Number
bridge.mqtt.aws.subscription.1.qos=1

## Need to subscribe to remote broker topics
##
## Value: String
bridge.mqtt.aws.subscription.2.topic=cmd/topic2

## Need to subscribe to remote topics QoS.
##
## Value: Number
bridge.mqtt.aws.subscription.2.qos=2

## parallel
## Handle a specified maximum number of outstanding requests
##
## Value: 1-infinity
bridge.mqtt.aws.parallel=2

## tls config ##

## enable tls
## 
## Value: true | false
bridge.mqtt.aws.tls.enable=true

## tls key password
## String containing the user's password. Only used if the private keyfile
## is password-protected.
##
## Value: String
## bridge.mqtt.aws.tls.key_password=yourpass

## tls keyfile
## Path of the file containing the client's private key.
##
## Value: File
bridge.mqtt.aws.tls.keyfile=/etc/certs/key.pem

## tls cert file
## Path of the file containing the client certificate.
##
## Value: File
bridge.mqtt.aws.tls.certfile=/etc/certs/cert.pem

## tls ca cert file
## Path of the file containing the server's root CA certificate.  
## 
## This certificate is used to identify the AWS IoT server and is publicly
## available.
##
## Value: File
bridge.mqtt.aws.tls.cacertfile=/etc/certs/cacert.pem

## A server only does x509-path validation in mode verify_peer,
## as it then sends a certificate request to the client (this
## message is not sent if the verify option is verify_none).
## You can then also want to specify option fail_if_no_peer_cert.
##
## Value: true: verify_peer | false: verify_none
bridge.mqtt.aws.tls.verify_peer=false

## Used together with {verify, verify_peer} by an SSL server. If set to true,
## the server fails if the client does not have a certificate to send, that is,
## sends an empty certificate.
##
## Value: true | false
bridge.mqtt.aws.tls.fail_if_no_peer_cert=false
