# NanoMQ Configuration 0.18.0

# #============================================================
# # NanoMQ Broker
# #============================================================

mqtt {
    property_size = 32
    max_packet_size = 10KB
    max_mqueue_len = 2048
    retry_interval = 10s
    keepalive_multiplier = 1.25
    
    # Three of below, unsupported now
    max_inflight_window = 2048
    max_awaiting_rel = 10s
    await_rel_timeout = 10s
}

listeners.tcp {
    bind = "0.0.0.0:1881"
}

# listeners.ssl {
# 	bind = "0.0.0.0:8883"
# 	keyfile = "../../../etc/certs/key.pem"
# 	certfile = "../../../etc/certs/cert.pem"
# 	cacertfile = "../../../etc/certs/cacert.pem"
# 	verify_peer = false
# 	fail_if_no_peer_cert = false
# }

listeners.ws {
    bind = "0.0.0.0:8083/mqtt"
}	

log {
    to = [file, console]
    level = error
    dir = "/tmp"
    file = "nanomq.log"
    rotation {
        size = 10MB
        count = 5
    }
}

# # c1 is the node name, you can setup multiple bridging targer with different node name
bridges.aws.c1 {
	server = "a2zegtl0x5owup-ats.iot.ap-northeast-1.amazonaws.com:8883"
	proto_ver = 4
	clientid = "nanomq_aws_bridge_test"
	# clientid = "aws_bridge_client"
	keepalive = 60s
	clean_start = true
	
	ssl {
	# # Ssl key password
	# # String containing the user's password. Only used if the private keyfile
	# # is password-protected.
	# #
	# # Value: String
	# key_password = "yourpass"
	# # Ssl keyfile
	# # Path of the file containing the client's private key.
	keyfile = "../../../nanomq/tests/aws-key.pem"
	# # Ssl cert file
	# # Path of the file containing the client certificate.
	certfile = "../../../nanomq/tests/aws-cert.pem"
	# # Ssl ca cert file
	# # Path of the file containing the server's root CA certificate.  
	# # This certificate is used to identify the AWS IoT server and is publicly
	# # available.
	cacertfile = "../../../nanomq/tests/aws-cacert.pem"
	}
	forwards = [
		{
			remote_topic = "fwd/topic1"
			local_topic = "topic1"
		},
		{
			remote_topic = "fwd/topic2"
			local_topic = "topic2"
		},
		{
			remote_topic = "nmqtest"
			local_topic = "nmqtest_lo"
		}
	]
# qos 2 is not supported
	subscription = [
		{
			remote_topic = "cmd/topic1"
			local_topic = "topic3"
			qos = 0
		},
		{
			remote_topic = "cmd/topic2"
			local_topic = "topic4"
			qos = 1
		},
		{
			remote_topic = "nmqtest"
			local_topic = "nmqtest_sub"
			qos = 0
		}
	]
	max_parallel_processes = 2
}

bridges.mqtt.emqx {
	## TCP URL 格式:  mqtt-tcp://host:port
	## TLS URL 格式:  tls+mqtt-tcp://host:port
	## QUIC URL 格式: mqtt-quic://host:port
	server = "mqtt-tcp://broker.emqx.io:1883"
	## MQTT 协议版本 （ 4 ｜ 5 ）
	proto_ver = 5
	username = admin
	password = public
	clean_start = true
	keepalive = 60s
	# 如果通过 TLS 桥接将下面的代码取消注释
	# ssl {
	# 	keyfile = "../../etc/certs/key.pem"
	# 	certfile = "../../etc/certs/cert.pem"
	# 	cacertfile = "../../etc/certs/cacert.pem"
	# }
	forwards = [
		{
			remote_topic = "fwd1/test"
			local_topic = "forward1/test"
		}
		{
			remote_topic = "fwd2/test"
			local_topic = "forward2/test"
		}
	]
	subscription = [
		{
			remote_topic = "recv/topic1"
			local_topic = "recv_lo/topic1"
			qos = 1
			retain_as_published = 0
		},
		{
			remote_topic = "recv/topic2"
			local_topic = "recv_lo/topic2"
			qos = 2
			retain_as_published = 1
			retain_handling = 0
		},
		{
			remote_topic = "cmd/topic1"
			local_topic = "cmd_lo/topic1"
			qos = 1
			retain_as_published = 1
			retain_handling = 1
		},
		{
			remote_topic = "cmd/topic2"
			local_topic = "cmd_lo/topic2"
			qos = 2
			retain_as_published = 1
			retain_handling = 2
		}
	]
	max_parallel_processes = 2 
	max_send_queue_len = 1024
	max_recv_queue_len = 1024
}
