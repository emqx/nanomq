# NanoMQ Configuration 0.18.0

# #============================================================
# # NanoMQ Broker
# #============================================================

mqtt {
    property_size = 32
    max_packet_size = 10KB
    max_mqueue_len = 2048
    retry_interval = 10s
    keepalive_multiplier = 1.25
    
    # Three of below, unsupported now
    max_inflight_window = 2048
    max_awaiting_rel = 10s
    await_rel_timeout = 10s
}

listeners.tcp {
    bind = "0.0.0.0:1881"
}

# listeners.ssl {
# 	bind = "0.0.0.0:8883"
# 	keyfile = "../../../etc/certs/key.pem"
# 	certfile = "../../../etc/certs/cert.pem"
# 	cacertfile = "../../../etc/certs/cacert.pem"
# 	verify_peer = false
# 	fail_if_no_peer_cert = false
# }

http_server {
    port = 8081
    limit_conn = 2
    username = admin_test
    password = pw_test
    auth_type = basic
    jwt {
        public.keyfile = "/etc/certs/jwt/jwtRS256.key.pub"
    }
}

listeners.ws {
    bind = "0.0.0.0:8083/mqtt"
}

log {
    to = [file, console]
    level = error
    dir = "/tmp"
    file = "nanomq.log"
    rotation {
        size = 10MB
        count = 5
    }
}

auth {
    allow_anonymous = true
    no_match = allow
    deny_action = ignore
    
    cache = {
        max_size = 32
        ttl = 1m
    }
    
    # password = {include "/etc/nanomq_pwd.conf"}
    # acl = {include "/etc/nanomq_acl.conf"}
}

bridges.mqtt.emqx {
	## TCP URL 格式:  mqtt-tcp://host:port
	## TLS URL 格式:  tls+mqtt-tcp://host:port
	## QUIC URL 格式: mqtt-quic://host:port
	server = "mqtt-tcp://broker.emqx.io:1883"
	## MQTT 协议版本 （ 4 ｜ 5 ）
	proto_ver = 5
	username = admin
	password = public
	clean_start = true
	keepalive = 60s
	# 如果通过 TLS 桥接将下面的代码取消注释
	# ssl {
	# 	keyfile = "../../etc/certs/key.pem"
	# 	certfile = "../../etc/certs/cert.pem"
	# 	cacertfile = "../../etc/certs/cacert.pem"
	# }

	tcp {
		# TCP_NODELAY:
		# If set, disable the Nagle algorithm.
		nodelay = false
		# SO_KEEPALIVE:
		# Enable sending of keep-alive messages on connection-oriented sockets.
		keepalive = true
		# TCP_QUICKACK:
		# Enable quickack mode if set or disable quickack mode
		quickack = true
		# TCP_KEEPIDLE:
		# The time (in seconds) the connection needs
		# to remain idle before TCP starts sending keepalive probes,
		# if the socket option SO_KEEPALIVE has been set on this socket.
		keepidle = 60s
		# TCP_KEEPINTVL:
		# The time (in seconds) between individual keepalive probes.
		keepintvl = 30s
		# TCP_KEEPCNT:
		# The maximum number of keepalive probes TCP should send
		# before dropping the connection.
		keepcnt = 30s
		# SO_RCVTIMEO and SO_SNDTIMEO:
		# Specify the receiving or sending timeouts until reporting an error.
		# TODO: enable Microseconds
		sendtimeo = 60s
		recvtimeo = 60s
	}

	forwards = [
		{
			remote_topic = "fwd1/test/ci"
			local_topic = "forward1/test/ci"
		}
		{
			remote_topic = "fwd2/test/ci"
			local_topic = "forward2/test/ci"
		}
	]
	subscription = [
		{
			remote_topic = "recv/topic1/ci"
			local_topic = "recv_lo/topic1"
			qos = 1
			retain_as_published = 0
		},
		{
			remote_topic = "recv/topic2/ci"
			local_topic = "recv_lo/topic2"
			qos = 2
			retain_as_published = 1
			retain_handling = 0
		},
		{
			remote_topic = "cmd/topic1/ci"
			local_topic = "cmd_lo/topic1"
			qos = 1
			retain_as_published = 1
			retain_handling = 1
		},
		{
			remote_topic = "cmd/topic2/ci"
			local_topic = "cmd_lo/topic2"
			qos = 2
			retain_as_published = 1
			retain_handling = 2
		}
	]
	max_parallel_processes = 2 
	max_send_queue_len = 1024
	max_recv_queue_len = 1024
}

