# NanoMQ Configuration 0.18.0

# #============================================================
# # NanoMQ Broker
# #============================================================

mqtt {
    property_size = 32
    max_packet_size = 10KB
    max_mqueue_len = 2048
    retry_interval = 10s
    keepalive_multiplier = 1.25
    
    # Three of below, unsupported now
    max_inflight_window = 2048
    max_awaiting_rel = 10s
    await_rel_timeout = 10s
}

listeners.tcp {
    bind = "0.0.0.0:1881"
}

listeners.ssl {
	bind = "0.0.0.0:8883"
	keyfile = "../../../etc/certs/key.pem"
	certfile = "../../../etc/certs/cert.pem"
	cacertfile = "../../../etc/certs/cacert.pem"
	verify_peer = false
	fail_if_no_peer_cert = false
}

listeners.ws {
    bind = "0.0.0.0:8083/mqtt"
}

http_server {
    port = 8081
    limit_conn = 2
    username = admin_test
    password = pw_test
    auth_type = basic
    jwt {
        public.keyfile = "/etc/certs/jwt/jwtRS256.key.pub"
    }
}

log {
    to = [file, console]
    level = warn
    dir = "/tmp"
    file = "nanomq.log"
    rotation {
        size = 10MB
        count = 5
    }
}

auth {
    allow_anonymous = true
    no_match = allow
    deny_action = ignore
    
    cache = {
        max_size = 32
        ttl = 1m
    }
    
    # password = {include "/etc/nanomq_pwd.conf"}
    # acl = {include "/etc/nanomq_acl.conf"}
}

# rules.repub {
# 	rules = [
# 		{
# 			# # Repub address: host:port .
# 			# #
# 			# # Value: String
# 			# # Example: mqtt-tcp://127.0.0.1:1883
# 			server = "mqtt-tcp://localhost:1881"
# 			# # Repub topic .
# 			# #
# 			# # Value: String
# 			# # Example: topic/repub
# 			topic = "topic/repub1"
# 			# # Protocol version of the Repub.
# 			# #
# 			# # Value: Enum
# 			# # - 5: mqttv5
# 			# # - 4: mqttv311
# 			# # - 3: mqttv31
# 			proto_ver = 4
# 			# # The ClientId of a Repub client.
# 			# # Default random string.
# 			# #
# 			# # Value: String
# 			clientid = "repub_client1"
# 			# # Ping interval of a Repub client.
# 			# #
# 			# # Value: Duration
# 			# # Default: 60 seconds
# 			keepalive = 60s
# 			# # The Clean start flag of a Repub client.
# 			# #
# 			# # Value: boolean
# 			# # Default: true
# 			# #
# 			# # NOTE: Some IoT platforms require clean_start
# 			# #       must be set to 'true'
# 			clean_start = true
# 			# # The username for a Repub client.
# 			# #
# 			# # Value: String
# 			username = username
# 			# # The password for a Repub.
# 			# #
# 			# # Value: String
# 			password = passwd
# 			# # Rule engine option sql
# 			# # Rule engine sql clause.
# 			# # 
# 			# # Value: String
# 			sql = "SELECT payload.x.y as y, payload.z as z FROM \"#\" WHERE y > 10 and z != 'str'"
# 		},
# 		{
# 			server = "mqtt-tcp://localhost:1881"
# 			topic = "topic/repub2"
# 			proto_ver = 4
# 			clientid = "repub_client2"
# 			keepalive = 60s
# 			clean_start = true
# 			username = username
# 			password = passwd
# 			sql = "SELECT topic, payload FROM \"abc\""
# 		}
# 	]
# }

rules.sqlite {
	# # Rule engine option SQLite3 database path
	# # Rule engine db path, default is exec path.
	# # 
	# # Value: File
	path = "/tmp/sqlite_rule.db"
	rules = [
		{
			# # Rule engine option sql
			# # Rule engine sql clause.
			# # 
			# # Value: String
			sql = "SELECT topic, payload FROM \"abc\""
			# # Rule engine option SQLite3 database table name
			# # Rule engine db table name.
			# # 
			# # Value: String
			table = broker
		}
	]
}

# # Currently, MySQL rule only supports the configuration of one database.
rules.mysql.mysql_rule_db {
	conn = {
		# # The host for a mqsql client.
		# #
		# # Value: String
		host = localhost
		# # The username for a mqsql client.
		# #
		# # Value: String
		username = username
		# # The password for a mysql client.
		# #
		# # Value: String
		password = password
		# # Rule engine option mysql database name
		# # Rule engine db path, default is exec path.
		# # 
		# # Value: File
		database = db_name
	}
	
	rules = [
		{
			# # Rule engine option mysql database table name
			# # Rule engine db table name.
			# # 
			# # Value: String
			table = broker1
			# # Rule engine option sql
			# # Rule engine sql clause.
			# # 
			# # Value: String
			sql = "SELECT * FROM \"abc\""
		}
	]
}

bridges.mqtt.emqx {
	## TCP URL 格式:  mqtt-tcp://host:port
	## TLS URL 格式:  tls+mqtt-tcp://host:port
	## QUIC URL 格式: mqtt-quic://host:port
	server = "mqtt-tcp://broker.emqx.io:1883"
	## MQTT 协议版本 （ 4 ｜ 5 ）
	proto_ver = 5
	username = admin
	password = public
	clean_start = true
	keepalive = 60s
	# 如果通过 TLS 桥接将下面的代码取消注释
	# ssl {
	# 	keyfile = "../../etc/certs/key.pem"
	# 	certfile = "../../etc/certs/cert.pem"
	# 	cacertfile = "../../etc/certs/cacert.pem"
	# }
	forwards = ["forward1/test","forward2/test"]
	subscription = [
		{
			topic = "recv/topic1"
			qos = 1
		},
		{
			topic = "recv/topic2"
			qos = 2
		},
		{
			topic = "cmd/topic1"
			qos = 1
		},
		{
			topic = "cmd/topic2"
			qos = 2
		}
	]
	max_parallel_processes = 2 
	max_send_queue_len = 1024
	max_recv_queue_len = 1024
}

